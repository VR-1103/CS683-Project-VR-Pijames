#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
#define PREFETCH_DEGREE 5             // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

class IP_TRACKER {
  public:
    uint64_t ip;
    uint64_t last_addr;
    int64_t stride;
    bool valid;

    IP_TRACKER(): ip(0), last_addr(0), stride(0), valid(false) {}
    // ------------------------- Define the IP_TRACKER class here ------------------------- //

    
};

class CSPT_ENTRY {
  public:
    int64_t stride;                         // Predicted stride
    int conf;                               // Confidence counter (2 bits)

    CSPT_ENTRY() {
        stride = 0;
        conf = 0;
    }
};



IP_TRACKER trackers[IP_TRACKER_COUNT];

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher" << endl;

}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    // ------------------------ Add IP-Stride pf_address logic here ----------------------- //
    uint64_t page_addr = addr >> LOG2_PAGE_SIZE;
    int tracker_idx = -1;

    for (int i = 0; i < IP_TRACKER_COUNT; i++) {
        if (trackers[i].valid && trackers[i].ip == ip) {
            tracker_idx = i;
            break;
        }
    }

    if (tracker_idx == -1) {
        for (int i = 0; i < IP_TRACKER_COUNT; i++) {
            if (!trackers[i].valid) {
                tracker_idx = i;
                trackers[i].ip = ip;
                trackers[i].last_addr = cl_addr;
                trackers[i].valid = true;
                return;
            }
        }
        return;
    }

    IP_TRACKER& tracker = trackers[tracker_idx];
    int64_t current_stride = cl_addr - tracker.last_addr;

    if (current_stride == tracker.stride) {
        for (int i = 1; i <= PREFETCH_DEGREE; i++) {
            uint64_t pf_address = (cl_addr + i * current_stride) << LOG2_BLOCK_SIZE;
            if ((pf_address >> LOG2_PAGE_SIZE) != page_addr){
                break;
            }
            prefetch_line(ip, addr, pf_address, FILL_L1, 0);
        }
    }

    tracker.stride = current_stride;
    tracker.last_addr = cl_addr;

    // prefetch_line(ip, addr, pf_address, FILL_L1, 0);

    return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
	return;
}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
    cout << "Degree: " << PREFETCH << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //