#include "cache.h"
#include <iostream>
#include <unordered_set>
#include <unordered_map>

using namespace std;

// SBFP Parameters
#define NUM_FREE_DISTANCES 14         // Number of free distances (-7 to -1 and 1 to 7)
#define FREE_DISTANCE_MIN -7          // Minimum free distance
#define FREE_DISTANCE_MAX 7           // Maximum free distance
#define FDT_THRESHOLD 100             // Threshold for FDT counters
#define FDT_MAX_COUNTER 1023          // Maximum value for FDT counters (10-bit counters)
#define SAMPLER_SIZE 64               // Size of the Sampler
#define PQ_SIZE 32                    // Size of the Prefetch Queue (PQ)
#define MAX_METADATA_VALUE 15         // Max value for metadata (4 bits)

// Markov Prefetcher Parameters
#define IP_TRACKER_COUNT 256          // Number of IP trackers
#define NUM_SLOTS 5                   // Number of slots per tracker
#define PREFETCH_DEGREE 10            // Prefetch degree (adjustable)

uint64_t global_time = 0;

// Mapping functions for free distances
int free_distance_to_index(int fd) {
    if (fd < 0)
        return fd + 7;   // Map fd -7 to -1 to index 0 to 6
    else if (fd > 0)
        return fd + 6;   // Map fd 1 to 7 to index 7 to 13
    else
        return -1;       // fd == 0 is invalid
}

int index_to_free_distance(int idx) {
    if (idx >= 0 && idx <= 6)
        return idx - 7;  // Map index 0 to 6 to fd -7 to -1
    else if (idx >= 7 && idx <= 13)
        return idx - 6;  // Map index 7 to 13 to fd 1 to 7
    else
        return 0;        // Invalid index
}

// SBFP Structures

// Sampler Entry
class SamplerEntry {
public:
    uint64_t vpn;          // Virtual page number
    int free_distance;     // Free distance
    bool valid;            // Valid bit

    SamplerEntry() : vpn(0), free_distance(0), valid(false) {}
};

// Prefetch Queue Entry
class PQEntry {
public:
    uint64_t vpn;          // Virtual page number
    uint64_t ppn;          // Physical page number (translation)
    int free_distance;     // Free distance
    bool valid;            // Valid bit

    PQEntry() : vpn(0), ppn(0), free_distance(0), valid(false) {}
};

// Sampler and PQ
SamplerEntry sampler[SAMPLER_SIZE];
int sampler_fifo_index = 0;

PQEntry pq[PQ_SIZE];
int pq_fifo_index = 0;

// Set to track pending prefetches
unordered_set<uint64_t> pending_prefetches;

// Free Distance Table (FDT) with 14 counters
uint16_t FDT[NUM_FREE_DISTANCES];     // Counters are 10 bits wide

// Markov Prefetcher Structures

class IP_TRACKER {
public:
    uint64_t page_tag;
    uint64_t slots[NUM_SLOTS];
    bool valid;
    uint64_t access[NUM_SLOTS];
    bool slots_valid[NUM_SLOTS];
    uint64_t last_used_time;

    IP_TRACKER() {
        page_tag = 0;
        for (int i = 0; i < NUM_SLOTS; i++) {
            slots[i] = 0;
            access[i] = 0;
            slots_valid[i] = false;
        }
        valid = false;
        last_used_time = 0;
    }

    bool update_tag(uint64_t page_addr, uint64_t current_time) {
        if (page_tag != page_addr || !valid) {
            page_tag = page_addr;
            valid = true;
            last_used_time = current_time;
            for (int i = 0; i < NUM_SLOTS; i++) {
                slots[i] = 0;
                access[i] = 0;
                slots_valid[i] = false;
            }
            return false;
        }
        last_used_time = current_time;
        return true;
    }

    void update_slot(uint64_t page_addr) {
        bool found_slot = false;
        for (int i = 0; i < NUM_SLOTS; i++) {
            if (!slots_valid[i]) {
                slots[i] = page_addr;
                slots_valid[i] = true;
                access[i] = 0;
                found_slot = true;
                break;
            }
        }
        if (!found_slot) {
            int lru_slot = 0;
            for (int i = 0; i < NUM_SLOTS; i++) {
                if (access[lru_slot] > access[i]) {
                    lru_slot = i;
                }
            }
            slots[lru_slot] = page_addr;
            slots_valid[lru_slot] = true;
            access[lru_slot] = 0;
        }
    }

    int find_degree() {
        int degree = 0;
        for (int i = 0; i < NUM_SLOTS; i++) {
            if (slots_valid[i]) {
                degree++;
            }
        }
        return degree;
    }

    uint64_t get_addr(int& index) {
        for (; index < NUM_SLOTS; index++) {
            if (slots_valid[index]) {
                access[index]++;
                return slots[index++];
            }
        }
        return 0; // No valid address found
    }
};

IP_TRACKER markov_trackers[IP_TRACKER_COUNT];

uint64_t prev_page_addr = 0;
int prev_index = 0;
bool beginning = true;

// Function to find or allocate a tracker
int find_tracker(uint64_t page_addr) {
    int empty_index = -1;
    int lru_index = 0;
    uint64_t oldest_time = global_time;

    for (int i = 0; i < IP_TRACKER_COUNT; i++) {
        if (markov_trackers[i].valid && markov_trackers[i].page_tag == page_addr) {
            return i;  // Tracker hit
        }
        if (!markov_trackers[i].valid && empty_index == -1) {
            empty_index = i;  // Track the first empty slot
        }
        if (markov_trackers[i].last_used_time < oldest_time) {
            lru_index = i;
            oldest_time = markov_trackers[i].last_used_time;
        }
    }
    // If no empty tracker is found, return the least recently used (LRU) tracker index
    return (empty_index != -1) ? empty_index : lru_index;
}

// Initialize the prefetcher
void CACHE::stlb_prefetcher_initialize()
{
    cout << "CPU " << cpu << " STLB Combined SBFP and Markov Prefetcher" << endl;

    // Initialize FDT counters to 0
    for (int i = 0; i < NUM_FREE_DISTANCES; ++i) {
        FDT[i] = 0;
    }

    // Initialize Sampler entries
    for (int i = 0; i < SAMPLER_SIZE; ++i) {
        sampler[i] = SamplerEntry();
    }
    sampler_fifo_index = 0;

    // Initialize PQ entries
    for (int i = 0; i < PQ_SIZE; ++i) {
        pq[i] = PQEntry();
    }
    pq_fifo_index = 0;

    // Initialize pending prefetches
    pending_prefetches.clear();

    // Initialize Markov Prefetcher trackers
    for (int i = 0; i < IP_TRACKER_COUNT; ++i) {
        markov_trackers[i] = IP_TRACKER();
    }

    prev_page_addr = 0;
    prev_index = 0;
    beginning = true;
    global_time = 0;
}

// Main prefetcher operate function
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    // addr is the virtual address
    uint64_t vpn = addr >> LOG2_PAGE_SIZE; // Virtual page number

    // First, handle SBFP logic

    // Check PQ for the VPN
    bool found_in_pq = false;
    int pq_index = -1;
    for (int i = 0; i < PQ_SIZE; ++i) {
        if (pq[i].valid && pq[i].vpn == vpn) {
            found_in_pq = true;
            pq_index = i;
            break;
        }
    }

    if (found_in_pq) {
        // PQ hit
        // Update FDT counter
        int fd = pq[pq_index].free_distance;
        int idx = free_distance_to_index(fd);
        if (idx >= 0 && idx < NUM_FREE_DISTANCES) {
            if (FDT[idx] < FDT_MAX_COUNTER) {
                FDT[idx]++;
            } else {
                // Decay all counters
                for (int j = 0; j < NUM_FREE_DISTANCES; ++j) {
                    FDT[j] = FDT[j] >> 1;
                }
            }
        }

        // Move the PTE from PQ to TLB (simulated)
        pq[pq_index].valid = false;

        // No need to proceed further
        return;

    } else {
        // Not found in PQ
        // Check Sampler
        bool found_in_sampler = false;
        int sampler_index = -1;
        for (int i = 0; i < SAMPLER_SIZE; ++i) {
            if (sampler[i].valid && sampler[i].vpn == vpn) {
                found_in_sampler = true;
                sampler_index = i;
                break;
            }
        }

        if (found_in_sampler) {
            // Sampler hit
            // Update FDT counter
            int fd = sampler[sampler_index].free_distance;
            int idx = free_distance_to_index(fd);
            if (idx >= 0 && idx < NUM_FREE_DISTANCES) {
                if (FDT[idx] < FDT_MAX_COUNTER) {
                    FDT[idx]++;
                } else {
                    // Decay all counters
                    for (int j = 0; j < NUM_FREE_DISTANCES; ++j) {
                        FDT[j] = FDT[j] >> 1;
                    }
                }
            }

            // Remove from Sampler
            sampler[sampler_index].valid = false;

            // No need to proceed further
            return;

        } else {
            // Not found in PQ or Sampler
            // Proceed to demand page walk (implied)

            // At the end of the page walk, generate free PTEs

            // Determine the position of the demanded PTE in cache line
            uint64_t vpn_offset = vpn & 0x7; // Bits 0-2

            // For each free distance
            for (int fd = FREE_DISTANCE_MIN; fd <= FREE_DISTANCE_MAX; ++fd) {
                if (fd == 0) continue; // Skip zero

                int idx = free_distance_to_index(fd);
                if (idx < 0 || idx >= NUM_FREE_DISTANCES) continue;

                uint16_t fdt_counter = FDT[idx];

                // Determine the virtual page number of the free PTE
                int64_t free_vpn = (int64_t)vpn + fd;

                // Skip if free_vpn is negative (invalid)
                if (free_vpn < 0) continue;

                // Check if free_vpn is already in PQ
                bool already_in_pq = false;
                for (int i = 0; i < PQ_SIZE; ++i) {
                    if (pq[i].valid && pq[i].vpn == (uint64_t)free_vpn) {
                        already_in_pq = true;
                        break;
                    }
                }

                // Check if free_vpn is already in Sampler
                bool already_in_sampler = false;
                if (!already_in_pq) {
                    for (int i = 0; i < SAMPLER_SIZE; ++i) {
                        if (sampler[i].valid && sampler[i].vpn == (uint64_t)free_vpn) {
                            already_in_sampler = true;
                            break;
                        }
                    }
                }

                // Check if prefetch is already pending
                bool already_pending = pending_prefetches.find((uint64_t)free_vpn) != pending_prefetches.end();

                if (already_in_pq || already_in_sampler || already_pending) {
                    // PTE already in PQ, Sampler, or pending prefetches, skip
                    continue;
                }

                if (fdt_counter >= FDT_THRESHOLD) {
                    // Prefetch into PQ (after prefetch completes)

                    // Issue prefetch
                    uint64_t pf_address = ((uint64_t)free_vpn << LOG2_PAGE_SIZE);

                    // Encode free distance in metadata (map fd from -7..+7 to 0..14)
                    uint32_t metadata = (uint32_t)(fd + 7);
                    if (metadata > MAX_METADATA_VALUE) metadata = MAX_METADATA_VALUE;

                    prefetch_translation(ip, pf_address, (int)2, metadata, prefetch_id, instruction);

                    // Add to pending prefetches
                    pending_prefetches.insert((uint64_t)free_vpn);

                } else {
                    // Add to Sampler
                    sampler[sampler_fifo_index].vpn = (uint64_t)free_vpn;
                    sampler[sampler_fifo_index].free_distance = fd;
                    sampler[sampler_fifo_index].valid = true;

                    // Update sampler_fifo_index
                    sampler_fifo_index = (sampler_fifo_index + 1) % SAMPLER_SIZE;
                }
            }

            // Now, activate the Markov Prefetcher

            uint64_t page_addr = addr >> LOG2_PAGE_SIZE;
            int tracker_index = find_tracker(page_addr);
            IP_TRACKER& tracker = markov_trackers[tracker_index];
            bool hit = tracker.update_tag(page_addr, global_time++);

            if (!beginning) {
                IP_TRACKER& prev_tracker = markov_trackers[prev_index];
                prev_tracker.update_slot(page_addr);
            }

            // Issue prefetch for current page
            uint64_t pf_address = addr;
            prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);

            if (hit) {
                int degree = tracker.find_degree();
                int addr_index = 0;
                for (int i = 0; i < degree; i++) {
                    uint64_t next_page = tracker.get_addr(addr_index);
                    uint64_t pf_vpn = next_page;
                    uint64_t pf_addr = pf_vpn << LOG2_PAGE_SIZE;

                    // Check if prefetch is already pending or in PQ/Sampler
                    bool already_in_pq = false;
                    for (int j = 0; j < PQ_SIZE; ++j) {
                        if (pq[j].valid && pq[j].vpn == pf_vpn) {
                            already_in_pq = true;
                            break;
                        }
                    }

                    bool already_in_sampler = false;
                    if (!already_in_pq) {
                        for (int j = 0; j < SAMPLER_SIZE; ++j) {
                            if (sampler[j].valid && sampler[j].vpn == pf_vpn) {
                                already_in_sampler = true;
                                break;
                            }
                        }
                    }

                    bool already_pending = pending_prefetches.find(pf_vpn) != pending_prefetches.end();

                    if (already_in_pq || already_in_sampler || already_pending) {
                        continue;
                    }

                    // Issue prefetch
                    prefetch_translation(ip, pf_addr, (int)2, 0, prefetch_id, instruction);
                    pending_prefetches.insert(pf_vpn);
                }
            }
            beginning = false;
            prev_page_addr = page_addr;
            prev_index = tracker_index;
        }
    }

    return;
}

// Handle prefetch completion
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    // addr is the virtual address of the completed prefetch
    uint64_t vpn = addr >> LOG2_PAGE_SIZE;

    // Remove from pending prefetches
    pending_prefetches.erase(vpn);

    // Retrieve free distance
    int fd = (int32_t)metadata_in - 7; // Decode fd from metadata

    if (metadata_in != 0) { // If metadata is non-zero, it's an SBFP prefetch
        // Add to PQ
        pq[pq_fifo_index].vpn = vpn;
        pq[pq_fifo_index].free_distance = fd;
        pq[pq_fifo_index].valid = true;

        // Simulate fetching physical address (PPN)
        pq[pq_fifo_index].ppn = 0; // Placeholder, as actual PPN is not available

        // Update pq_fifo_index
        pq_fifo_index = (pq_fifo_index + 1) % PQ_SIZE;
    }

    // For Markov Prefetcher prefetches, we might not need to do anything extra here

    return;
}

// Final stats function
void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB Combined SBFP and Markov Prefetcher final stats" << endl;
}
