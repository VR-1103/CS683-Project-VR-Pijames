#include "cache.h"
#include <iostream>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define NUM_FREE_DISTANCES 14         // Number of free distances (-7 to -1 and 1 to 7)
#define FREE_DISTANCE_MIN -7          // Minimum free distance
#define FREE_DISTANCE_MAX 7           // Maximum free distance
#define FDT_THRESHOLD 100             // Threshold for FDT counters
#define FDT_MAX_COUNTER 1023          // Maximum value for FDT counters (10-bit counters)
#define SAMPLER_SIZE 64               // Size of the Sampler
#define PQ_SIZE 32                    // Size of the Prefetch Queue (PQ)
#define MAX_METADATA_VALUE 15         // Max value for metadata (4 bits)

// Mapping functions for free distances
int free_distance_to_index(int fd) {
    if (fd < 0)
        return fd + 7;   // Map fd -7 to -1 to index 0 to 6
    else if (fd > 0)
        return fd + 6;   // Map fd 1 to 7 to index 7 to 13
    else
        return -1;       // fd == 0 is invalid
}

int index_to_free_distance(int idx) {
    if (idx >= 0 && idx <= 6)
        return idx - 7;  // Map index 0 to 6 to fd -7 to -1
    else if (idx >= 7 && idx <= 13)
        return idx - 6;  // Map index 7 to 13 to fd 1 to 7
    else
        return 0;        // Invalid index
}

// Sampler Entry
class SamplerEntry {
public:
    uint64_t vpn;          // Virtual page number
    int free_distance;     // Free distance
    bool valid;            // Valid bit

    SamplerEntry() : vpn(0), free_distance(0), valid(false) {}
};

// Prefetch Queue Entry
class PQEntry {
public:
    uint64_t vpn;          // Virtual page number
    uint64_t ppn;          // Physical page number (translation)
    int free_distance;     // Free distance
    bool valid;            // Valid bit

    PQEntry() : vpn(0), ppn(0), free_distance(0), valid(false) {}
};

// Sampler and PQ
SamplerEntry sampler[SAMPLER_SIZE];
int sampler_fifo_index = 0;

PQEntry pq[PQ_SIZE];
int pq_fifo_index = 0;

// Set to track pending prefetches
unordered_set<uint64_t> pending_prefetches;

// Free Distance Table (FDT) with 14 counters
uint16_t FDT[NUM_FREE_DISTANCES];     // Counters are 10 bits wide

// Initialize the prefetcher
void CACHE::stlb_prefetcher_initialize()
{
    cout << "CPU " << cpu << " STLB SBFP prefetcher" << endl;

    // Initialize FDT counters to 0
    for (int i = 0; i < NUM_FREE_DISTANCES; ++i) {
        FDT[i] = 0;
    }

    // Initialize Sampler entriesÂ 
    for (int i = 0; i < SAMPLER_SIZE; ++i) {
        sampler[i] = SamplerEntry();
    }
    sampler_fifo_index = 0;

    // Initialize PQ entries
    for (int i = 0; i < PQ_SIZE; ++i) {
        pq[i] = PQEntry();
    }
    pq_fifo_index = 0;

    // Initialize pending prefetches
    pending_prefetches.clear();
}

// Main prefetcher operate function
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    // addr is the virtual address
    uint64_t vpn = addr >> LOG2_PAGE_SIZE; // Virtual page number

    if (cache_hit == 0) {
        // TLB miss

        // Check PQ for the VPN
        bool found_in_pq = false;
        int pq_index = -1;
        for (int i = 0; i < PQ_SIZE; ++i) {
            if (pq[i].valid && pq[i].vpn == vpn) {
                found_in_pq = true;
                pq_index = i;
                break;
            }
        }

        if (found_in_pq) {
            // PQ hit
            // Update FDT counter
            int fd = pq[pq_index].free_distance;
            int idx = free_distance_to_index(fd);
            if (idx >= 0 && idx < NUM_FREE_DISTANCES) {
                if (FDT[idx] < FDT_MAX_COUNTER) {
                    FDT[idx]++;
                } else {
                    // Decay all counters
                    for (int j = 0; j < NUM_FREE_DISTANCES; ++j) {
                        FDT[j] = FDT[j] >> 1;
                    }
                }
            }

            // Move the PTE from PQ to TLB (simulated)
            pq[pq_index].valid = false;

            // No need to proceed further
            return;

        } else {
            // Not found in PQ
            // Check Sampler
            bool found_in_sampler = false;
            int sampler_index = -1;
            for (int i = 0; i < SAMPLER_SIZE; ++i) {
                if (sampler[i].valid && sampler[i].vpn == vpn) {
                    found_in_sampler = true;
                    sampler_index = i;
                    break;
                }
            }

            if (found_in_sampler) {
                // Sampler hit
                // Update FDT counter
                int fd = sampler[sampler_index].free_distance;
                int idx = free_distance_to_index(fd);
                if (idx >= 0 && idx < NUM_FREE_DISTANCES) {
                    if (FDT[idx] < FDT_MAX_COUNTER) {
                        FDT[idx]++;
                    } else {
                        // Decay all counters
                        for (int j = 0; j < NUM_FREE_DISTANCES; ++j) {
                            FDT[j] = FDT[j] >> 1;
                        }
                    }
                }

                // Remove from Sampler
                sampler[sampler_index].valid = false;

                // No need to proceed further
                return;

            } else {
                // Not found in PQ or Sampler
                // Proceed to demand page walk (implied)

                // At the end of the page walk, generate free PTEs

                // Determine the position of the demanded PTE in cache line
                uint64_t vpn_offset = vpn & 0x7; // Bits 0-2

                // For each free distance
                for (int fd = FREE_DISTANCE_MIN; fd <= FREE_DISTANCE_MAX; ++fd) {
                    if (fd == 0) continue; // Skip zero

                    int idx = free_distance_to_index(fd);
                    if (idx < 0 || idx >= NUM_FREE_DISTANCES) continue;

                    uint16_t fdt_counter = FDT[idx];

                    // Determine the virtual page number of the free PTE
                    int64_t free_vpn = (int64_t)vpn + fd;

                    // Skip if free_vpn is negative (invalid)
                    if (free_vpn < 0) continue;

                    // Check if free_vpn is already in PQ
                    bool already_in_pq = false;
                    for (int i = 0; i < PQ_SIZE; ++i) {
                        if (pq[i].valid && pq[i].vpn == (uint64_t)free_vpn) {
                            already_in_pq = true;
                            break;
                        }
                    }

                    // Check if free_vpn is already in Sampler
                    bool already_in_sampler = false;
                    if (!already_in_pq) {
                        for (int i = 0; i < SAMPLER_SIZE; ++i) {
                            if (sampler[i].valid && sampler[i].vpn == (uint64_t)free_vpn) {
                                already_in_sampler = true;
                                break;
                            }
                        }
                    }

                    // Check if prefetch is already pending
                    bool already_pending = pending_prefetches.find((uint64_t)free_vpn) != pending_prefetches.end();

                    if (already_in_pq || already_in_sampler || already_pending) {
                        // PTE already in PQ, Sampler, or pending prefetches, skip
                        continue;
                    }

                    if (fdt_counter >= FDT_THRESHOLD) {
                        // Prefetch into PQ (after prefetch completes)

                        // Issue prefetch
                        uint64_t pf_address = ((uint64_t)free_vpn << LOG2_PAGE_SIZE);

                        // Encode free distance in metadata (map fd from -7..+7 to 0..14)
                        uint32_t metadata = (uint32_t)(fd + 7);
                        if (metadata > MAX_METADATA_VALUE) metadata = MAX_METADATA_VALUE;

                        prefetch_translation(ip, pf_address, (int)2, metadata, prefetch_id, instruction);

                        // Add to pending prefetches
                        pending_prefetches.insert((uint64_t)free_vpn);

                    } else {
                        // Add to Sampler
                        sampler[sampler_fifo_index].vpn = (uint64_t)free_vpn;
                        sampler[sampler_fifo_index].free_distance = fd;
                        sampler[sampler_fifo_index].valid = true;

                        // Update sampler_fifo_index
                        sampler_fifo_index = (sampler_fifo_index + 1) % SAMPLER_SIZE;
                    }
                }
            }
        }
    }

    // On TLB hit (cache_hit == 1), no action is required

    return;
}

// Handle prefetch completion
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    // addr is the virtual address of the completed prefetch
    uint64_t vpn = addr >> LOG2_PAGE_SIZE;

    // Remove from pending prefetches
    pending_prefetches.erase(vpn);

    // Retrieve free distance
    int fd = (int32_t)metadata_in - 7; // Decode fd from metadata

    // Add to PQ
    pq[pq_fifo_index].vpn = vpn;
    pq[pq_fifo_index].free_distance = fd;
    pq[pq_fifo_index].valid = true;

    // Simulate fetching physical address (PPN)
    pq[pq_fifo_index].ppn = 0; // Placeholder, as actual PPN is not available

    // Update pq_fifo_index
    pq_fifo_index = (pq_fifo_index + 1) % PQ_SIZE;

    return;
}

// Final stats function
void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB SBFP prefetcher final stats" << endl;
}
