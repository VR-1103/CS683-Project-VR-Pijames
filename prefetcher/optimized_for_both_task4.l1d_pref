#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_IP_TABLE_ENTRIES 1024  
#define NUM_IP_TABLE_L1_ENTRIES 1024  // IP table entries
#define IP_TRACKER_COUNT 64           // Number of IP trackers
#define PREFETCH_DEGREE 5             // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //
#define CSPT_SIZE 1024                      // Size of the Complex Stride Prediction Table (CSPT)
#define MAX_CONFIDENCE 3                    // Maximum value for confidence counter
#define MIN_CONFIDENCE 0                    // Minimum value for confidence counter
#define LOG2_PAGE_SIZE 12                   // Assuming 4KB page size
#define PHASE_LENGTH 15000              // Choose an appropriate phase length

uint64_t num_prefs = 0;               // To keep a track of the number of prefetched lines

// Track the accuracy of the different prefetchers
double accuracy_ip;
double accuracy_cplx;
double accuracy_nl;
int pf_useful_ip;
int pf_issued_ip;
int pf_useful_cplx;
int pf_issued_cplx;
int pf_useful_nl;
int pf_issued_nl;
int pf_useful_l1d;
int pf_issued_l1d;

#define IP_STRIDE 1                   // IP-Stride Prefetcher
#define CPLX 2                        // Complex-Stride Prefetcher
#define NL 3                          // Next-line Prefetcher

uint16_t prefetcher = IP_STRIDE;      // Start with the IP-Stride Prefetcher

class IP_TRACKER {
  public:
    uint64_t ip;
    uint64_t last_addr;
    int64_t stride;
    bool valid;

    IP_TRACKER(): ip(0), last_addr(0), stride(0), valid(false) {}
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

class IP_TABLE {
  public:
    uint64_t ip_tag;
    uint64_t last_page;                 // last page seen by IP
    uint64_t last_cl_offset;            // last cl offset in the 4KB page
    int64_t last_stride;                // last delta observed
    uint16_t ip_valid;                  // valid IP or not   
    int conf;                           // CPLX conf
    uint16_t signature;                 // CPLX signature
    int stride;                         // Stride

    IP_TABLE() {
        ip_tag = 0;
        last_page = 0;
        last_cl_offset = 0;
        last_stride = 0;
        ip_valid = 0;
        signature = 0;
        conf = 0;
        stride = 0;
    };
};

class CSPT_ENTRY {
  public:
    int64_t stride;                         // Predicted stride
    int conf;                               // Confidence counter (2 bits)

    CSPT_ENTRY() {
        stride = 0;
        conf = 0;
    }
};

CSPT_ENTRY cspt[CSPT_SIZE];
IP_TABLE trackers_cplx[NUM_CPUS][NUM_IP_TABLE_L1_ENTRIES];

// ------------------------- Updating the signature ---------------------------- //
uint16_t update_sig_l1(uint16_t old_sig, int64_t delta) {
    // Shift the old signature left by 1 and XOR with the lower bits of the delta
    return (old_sig << 1) ^ (delta & 0xFFFF);
}

// ------------------- Updating confidence for the CPLX class ------------------ //
int update_conf(int64_t stride, int64_t pred_stride, int conf) {
    if (stride == pred_stride) {
        if (conf < MAX_CONFIDENCE) conf++;
    } else {
        if (conf > MIN_CONFIDENCE) conf--;
    }
    return conf;
}

// ------------------------- Initialize the prefetcher ------------------------- //
void CACHE::l1d_prefetcher_initialize()
{
    cout << "CPU " << cpu << " L1D Complex-Stride prefetcher" << endl;
    // Initialize CSPT entries
    for (int i = 0; i < CSPT_SIZE; i++) {
        cspt[i] = CSPT_ENTRY();
    }
}

// ((double)cache->pf_useful*100/cache->pf_lower_level)
// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag, double accuracy, int pf_issued, int pf_useful)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    uint64_t page_addr = addr >> LOG2_PAGE_SIZE;

    if (type == PREFETCH){
        if (cache_hit == 1){
            if (l1d_throttle < 10){
                l1d_throttle++;
            }
        }
        else{
            if(l1d_throttle > 0){
                l1d_throttle--;
            }
        }
    }

    if (l1d_throttle < stlb_throttle){
        return;
    }


    if (warmup_complete[0] == 1) {
        
        if (pf_issued<PHASE_LENGTH){
            prefetcher = NL;
            pf_issued_nl = pf_issued;
            pf_useful_nl = pf_useful;
            accuracy_nl = ((double)pf_useful_nl*100/pf_issued_nl);
        }

        else if (pf_issued<2*PHASE_LENGTH){
            prefetcher = CPLX;
            pf_issued_cplx = pf_issued - pf_issued_nl;
            pf_useful_cplx = pf_useful - pf_useful_nl;
            accuracy_cplx = ((double)pf_useful_cplx*100/pf_issued_cplx);
        }

        else if (pf_issued<3*PHASE_LENGTH){
            prefetcher = IP_STRIDE;
            pf_issued_ip = pf_issued - pf_issued_nl - pf_issued_cplx;
            pf_useful_ip = pf_useful - pf_useful_nl - pf_useful_cplx;
            accuracy_ip = ((double)pf_useful_ip*100/pf_issued_ip);
        }

        else{
            if (accuracy_ip>accuracy_nl && accuracy_ip>accuracy_cplx){
                prefetcher = IP_STRIDE;
            }
            else if (accuracy_nl>accuracy_ip && accuracy_nl>accuracy_cplx){
                prefetcher = NL;
            }
            else if (accuracy_cplx>accuracy_ip && accuracy_cplx>accuracy_nl){
                prefetcher = CPLX;
            }
        }


        if (prefetcher == IP_STRIDE) {
            int tracker_idx = -1;

            for (int i = 0; i < IP_TRACKER_COUNT; i++) {
                if (trackers[i].valid && trackers[i].ip == ip) {
                    tracker_idx = i;
                    break;
                }
            }

            if (tracker_idx == -1) {
                for (int i = 0; i < IP_TRACKER_COUNT; i++) {
                    if (!trackers[i].valid) {
                        tracker_idx = i;
                        trackers[i].ip = ip;
                        trackers[i].last_addr = cl_addr;
                        trackers[i].valid = true;
                        return;
                    }
                }
                return;
            }

            IP_TRACKER& tracker = trackers[tracker_idx];
            int64_t current_stride = cl_addr - tracker.last_addr;

            if (current_stride == tracker.stride) {
                for (int i = 1; i <= PREFETCH_DEGREE; i++) {
                    uint64_t pf_address = (cl_addr + i * current_stride) << LOG2_BLOCK_SIZE;
                    if ((pf_address >> LOG2_PAGE_SIZE) != page_addr){
                        break;
                    }
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0);
                }
            }

            tracker.stride = current_stride;
            tracker.last_addr = cl_addr;
                
            // prefetch_line(ip, addr, pf_address, FILL_L1, 0);
        }
        else if (prefetcher == CPLX) {
            uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;       // Cache line address
            uint64_t page_addr = addr >> LOG2_PAGE_SIZE;      // Page address

            // Compute index into IP table
            int ip_index = ip % NUM_IP_TABLE_ENTRIES;
            IP_TABLE& entry = trackers_cplx[cpu][ip_index];

            // Check if the IP table entry is valid and matches the IP tag
            if (!entry.ip_valid || entry.ip_tag != ip) {
                // Initialize the IP table entry
                entry.ip_tag = ip;
                entry.ip_valid = 1;
                entry.signature = 0;
                entry.last_cl_offset = cl_addr;
                entry.last_page = page_addr;
                entry.last_stride = 0;
                // No prediction on first access
                return;
            }

            // Calculate the current stride (delta)
            int64_t current_stride = cl_addr - entry.last_cl_offset;

            // Update the signature with the last observed stride
            entry.signature = update_sig_l1(entry.signature, entry.last_stride);

            // Use the updated signature to index into the CSPT
            int cspt_index = entry.signature % CSPT_SIZE;
            CSPT_ENTRY& cspt_entry = cspt[cspt_index];

            // Get predicted stride from CSPT
            int64_t pred_stride = cspt_entry.stride;

            // Compare predicted stride to observed stride, update confidence
            cspt_entry.conf = update_conf(current_stride, pred_stride, cspt_entry.conf);

            // If confidence is zero, update predicted stride in CSPT
            if (cspt_entry.conf == MIN_CONFIDENCE) {
                cspt_entry.stride = current_stride;
            }

            // If confidence is high enough, issue prefetches
            if (cspt_entry.conf >= 2) {
                uint64_t pf_cl_addr = cl_addr;
                uint16_t pf_signature = entry.signature;  // Copy of signature for prefetching

                for (int i = 0; i < PREFETCH_DEGREE; i++) {
                    // Update pf_signature with the predicted stride
                    pf_signature = update_sig_l1(pf_signature, pred_stride);

                    // Use updated pf_signature to index into CSPT
                    int pf_cspt_index = pf_signature % CSPT_SIZE;
                    CSPT_ENTRY& pf_cspt_entry = cspt[pf_cspt_index];

                    // Get predicted stride for next prefetch
                    pred_stride = pf_cspt_entry.stride;

                    // Break if confidence not high enough
                    if (pf_cspt_entry.conf < 2) {
                        break;
                    }

                    // Compute prefetch address
                    pf_cl_addr += pred_stride;
                    uint64_t pf_address = pf_cl_addr << LOG2_BLOCK_SIZE;

                    // Ensure prefetch does not cross page boundaries
                    if ((pf_address >> LOG2_PAGE_SIZE) != page_addr) {
                        break;
                    }

                    // Issue prefetch
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0);
                }
            }

            // Update last accessed cache line offset and last stride
            entry.last_cl_offset = cl_addr;
            entry.last_stride = current_stride;
            // prefetch_line(ip, addr, pf_address, FILL_L1, 0);
        }
        else if (prefetcher == NL) {
            for (int i=0; i<PREFETCH_DEGREE; i++) {
                uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

                // ----------------------- Next-line logic ------------------------ // 
                uint64_t pf_address = (cl_addr + ((i+1))) << LOG2_BLOCK_SIZE;

                // only issue a prefetch if the prefetch address is in the same 4 KB page
                // as the current demand access address
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;
                    
                prefetch_line(ip, addr, pf_address, FILL_L1, 0);
            }
        }
        else {
            assert(0);
        }
    }

	return;

}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
    
}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D optimized prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
    cout << "Prefetcher Choosen: " << prefetcher << endl;
    cout << "Accuracy - ip stride: " << accuracy_ip << endl;
    cout << "Accuracy - cplx: " << accuracy_cplx << endl;
    cout << "Accuracy - nl: " << accuracy_nl << endl;
    cout << "PF_Issued_IP: " << pf_issued_ip << endl;
    cout << "PF_Issued_CPLX: " << pf_issued_cplx << endl;
    cout << "PF_Issued_NL: " << pf_issued_nl << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //