#include "cache.h"
#include <iostream>
#include <unordered_set>

using namespace std;

// SBFP Parameters
#define NUM_FREE_DISTANCES 14         // Number of free distances (-7 to -1 and 1 to 7)
#define FREE_DISTANCE_MIN -7          // Minimum free distance
#define FREE_DISTANCE_MAX 7           // Maximum free distance
#define FDT_THRESHOLD 100             // Threshold for FDT counters
#define FDT_MAX_COUNTER 1023          // Maximum value for FDT counters (10-bit counters)
#define SAMPLER_SIZE 64               // Size of the Sampler
#define PQ_SIZE 32                    // Size of the Prefetch Queue (PQ)
#define MAX_METADATA_VALUE 15         // Max value for metadata (4 bits)

// ATP Parameters
#define MASP_TRACKER_COUNT 64         // Entries in MASP IP table
#define FPQ_COUNT 16                  // Keep track of last 16 prefetched pages
#define IP_TAG(ip) ((ip) >> 6)
#define CONF_MAX 64
#define CONF_MIN 0
#define CONF 32                       // Threshold for confidence counters

// Mapping functions for free distances
int free_distance_to_index(int fd) {
    if (fd < 0)
        return fd + 7;   // Map fd -7 to -1 to index 0 to 6
    else if (fd > 0)
        return fd + 6;   // Map fd 1 to 7 to index 7 to 13
    else
        return -1;       // fd == 0 is invalid
}

int index_to_free_distance(int idx) {
    if (idx >= 0 && idx <= 6)
        return idx - 7;  // Map index 0 to 6 to fd -7 to -1
    else if (idx >= 7 && idx <= 13)
        return idx - 6;  // Map index 7 to 13 to fd 1 to 7
    else
        return 0;        // Invalid index
}

// SBFP Structures

// Sampler Entry
class SamplerEntry {
public:
    uint64_t vpn;          // Virtual page number
    int free_distance;     // Free distance
    bool valid;            // Valid bit

    SamplerEntry() : vpn(0), free_distance(0), valid(false) {}
};

// Prefetch Queue Entry
class PQEntry {
public:
    uint64_t vpn;          // Virtual page number
    uint64_t ppn;          // Physical page number (translation)
    int free_distance;     // Free distance
    bool valid;            // Valid bit

    PQEntry() : vpn(0), ppn(0), free_distance(0), valid(false) {}
};

// SBFP Data Structures
SamplerEntry sampler[SAMPLER_SIZE];
int sampler_fifo_index = 0;

PQEntry pq[PQ_SIZE];
int pq_fifo_index = 0;

uint16_t FDT[NUM_FREE_DISTANCES];     // Counters are 10 bits wide

// Set to track pending prefetches
unordered_set<uint64_t> pending_prefetches;

// ATP Structures

class MASP_TRACKER {
public:
    uint64_t ip_tag;
    uint64_t last_pg_addr;
    int64_t last_stride;
    bool valid;

    MASP_TRACKER() : ip_tag(0), last_pg_addr(0), last_stride(0), valid(false) {}

    bool update_ip(uint64_t new_ip, uint64_t page_addr) {
        if (ip_tag != IP_TAG(new_ip) || !valid) {
            ip_tag = IP_TAG(new_ip);
            last_pg_addr = page_addr;
            last_stride = 0;
            valid = true;
            return false;
        }
        return true;
    }

    void update_data(uint64_t page_addr) {
        last_stride = page_addr - last_pg_addr;
        last_pg_addr = page_addr;
    }
};

class FPQ_ENTRY {
public:
    uint64_t page_addr;
    bool valid;

    FPQ_ENTRY() : page_addr(0), valid(false) {}
};

class FPQ {
public:
    FPQ_ENTRY fpq_entry[FPQ_COUNT];

    void initialize_table() {
        for (int i = 0; i < FPQ_COUNT; ++i) {
            fpq_entry[i] = FPQ_ENTRY();
        }
    }

    void add_entry(uint64_t addr1, uint64_t addr2) {
        // Shift all entries two positions down, discarding the last entries
        for (int i = FPQ_COUNT - 1; i >= 2; --i) {
            fpq_entry[i] = fpq_entry[i - 2];
        }

        // Insert the two new entries at the beginning
        fpq_entry[0].page_addr = addr1;
        fpq_entry[0].valid = true;

        fpq_entry[1].page_addr = addr2;
        fpq_entry[1].valid = true;
    }

    bool check_addr(uint64_t addr) {
        for (int i = 0; i < FPQ_COUNT; i++) {
            if (fpq_entry[i].valid && fpq_entry[i].page_addr == addr) {
                return true;
            }
        }
        return false;
    }
};

// ATP Data Structures
MASP_TRACKER masp_trackers[MASP_TRACKER_COUNT];
FPQ masp_fpq;
FPQ stride_fpq;
FPQ h2_fpq;

uint64_t last_addr = 0;    // Previous missed address
uint64_t last2_addr = 0;   // Second previous missed address
int c0 = 32;
int c1 = 32;
int c2 = 32;               // Confidence counters

void increase_c0(bool increase) {
    if (increase) {
        if (c0 < CONF_MAX) c0++;
    } else {
        if (c0 > CONF_MIN) c0--;
    }
}

void increase_c1(bool increase) {
    if (increase) {
        if (c1 < CONF_MAX) c1++;
    } else {
        if (c1 > CONF_MIN) c1--;
    }
}

void increase_c2(bool increase) {
    if (increase) {
        if (c2 < CONF_MAX) c2++;
    } else {
        if (c2 > CONF_MIN) c2--;
    }
}

// Initialize the prefetcher
void CACHE::stlb_prefetcher_initialize()
{
    cout << "CPU " << cpu << " Combined ATP and SBFP Prefetcher" << endl;

    // Initialize SBFP structures
    for (int i = 0; i < NUM_FREE_DISTANCES; ++i) {
        FDT[i] = 0;
    }

    for (int i = 0; i < SAMPLER_SIZE; ++i) {
        sampler[i] = SamplerEntry();
    }
    sampler_fifo_index = 0;

    for (int i = 0; i < PQ_SIZE; ++i) {
        pq[i] = PQEntry();
    }
    pq_fifo_index = 0;

    pending_prefetches.clear();

    // Initialize ATP structures
    for (int i = 0; i < MASP_TRACKER_COUNT; ++i) {
        masp_trackers[i] = MASP_TRACKER();
    }

    masp_fpq.initialize_table();
    stride_fpq.initialize_table();
    h2_fpq.initialize_table();

    last_addr = 0;
    last2_addr = 0;
    c0 = c1 = c2 = 32;  // Initialize confidence counters to mid-value
}

// Main prefetcher operate function
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit,
                                    uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    // addr is the virtual address
    uint64_t vpn = addr >> LOG2_PAGE_SIZE; // Virtual page number

    if (cache_hit == 0) {
        // TLB miss

        // First, handle SBFP logic

        // Check PQ for the VPN
        bool found_in_pq = false;
        int pq_index = -1;
        for (int i = 0; i < PQ_SIZE; ++i) {
            if (pq[i].valid && pq[i].vpn == vpn) {
                found_in_pq = true;
                pq_index = i;
                break;
            }
        }

        if (found_in_pq) {
            // PQ hit
            // Update FDT counter
            int fd = pq[pq_index].free_distance;
            int idx = free_distance_to_index(fd);
            if (idx >= 0 && idx < NUM_FREE_DISTANCES) {
                if (FDT[idx] < FDT_MAX_COUNTER) {
                    FDT[idx]++;
                } else {
                    // Decay all counters
                    for (int j = 0; j < NUM_FREE_DISTANCES; ++j) {
                        FDT[j] = FDT[j] >> 1;
                    }
                }
            }

            // Move the PTE from PQ to TLB (simulated)
            pq[pq_index].valid = false;

            // No need to proceed further
            return;

        } else {
            // Not found in PQ
            // Check Sampler
            bool found_in_sampler = false;
            int sampler_index = -1;
            for (int i = 0; i < SAMPLER_SIZE; ++i) {
                if (sampler[i].valid && sampler[i].vpn == vpn) {
                    found_in_sampler = true;
                    sampler_index = i;
                    break;
                }
            }

            if (found_in_sampler) {
                // Sampler hit
                // Update FDT counter
                int fd = sampler[sampler_index].free_distance;
                int idx = free_distance_to_index(fd);
                if (idx >= 0 && idx < NUM_FREE_DISTANCES) {
                    if (FDT[idx] < FDT_MAX_COUNTER) {
                        FDT[idx]++;
                    } else {
                        // Decay all counters
                        for (int j = 0; j < NUM_FREE_DISTANCES; ++j) {
                            FDT[j] = FDT[j] >> 1;
                        }
                    }
                }

                // Remove from Sampler
                sampler[sampler_index].valid = false;

                // No need to proceed further
                return;

            } else {
                // Not found in PQ or Sampler
                // Proceed to demand page walk (implied)

                // At the end of the page walk, generate free PTEs

                // Determine the position of the demanded PTE in cache line
                uint64_t vpn_offset = vpn & 0x7; // Bits 0-2

                // For each free distance
                for (int fd = FREE_DISTANCE_MIN; fd <= FREE_DISTANCE_MAX; ++fd) {
                    if (fd == 0) continue; // Skip zero

                    int idx = free_distance_to_index(fd);
                    if (idx < 0 || idx >= NUM_FREE_DISTANCES) continue;

                    uint16_t fdt_counter = FDT[idx];

                    // Determine the virtual page number of the free PTE
                    int64_t free_vpn = (int64_t)vpn + fd;

                    // Skip if free_vpn is negative (invalid)
                    if (free_vpn < 0) continue;

                    // Check if free_vpn is already in PQ
                    bool already_in_pq = false;
                    for (int i = 0; i < PQ_SIZE; ++i) {
                        if (pq[i].valid && pq[i].vpn == (uint64_t)free_vpn) {
                            already_in_pq = true;
                            break;
                        }
                    }

                    // Check if free_vpn is already in Sampler
                    bool already_in_sampler = false;
                    if (!already_in_pq) {
                        for (int i = 0; i < SAMPLER_SIZE; ++i) {
                            if (sampler[i].valid && sampler[i].vpn == (uint64_t)free_vpn) {
                                already_in_sampler = true;
                                break;
                            }
                        }
                    }

                    // Check if prefetch is already pending
                    bool already_pending = pending_prefetches.find((uint64_t)free_vpn) != pending_prefetches.end();

                    if (already_in_pq || already_in_sampler || already_pending) {
                        // PTE already in PQ, Sampler, or pending prefetches, skip
                        continue;
                    }

                    if (fdt_counter >= FDT_THRESHOLD) {
                        // Prefetch into PQ (after prefetch completes)

                        // Issue prefetch
                        uint64_t pf_address = ((uint64_t)free_vpn << LOG2_PAGE_SIZE);

                        // Encode free distance in metadata (map fd from -7..+7 to 0..14)
                        uint32_t metadata = (uint32_t)(fd + 7);
                        if (metadata > MAX_METADATA_VALUE) metadata = MAX_METADATA_VALUE;

                        prefetch_translation(ip, pf_address, (int)2, metadata, prefetch_id, instruction);

                        // Add to pending prefetches
                        pending_prefetches.insert((uint64_t)free_vpn);

                    } else {
                        // Add to Sampler
                        sampler[sampler_fifo_index].vpn = (uint64_t)free_vpn;
                        sampler[sampler_fifo_index].free_distance = fd;
                        sampler[sampler_fifo_index].valid = true;

                        // Update sampler_fifo_index
                        sampler_fifo_index = (sampler_fifo_index + 1) % SAMPLER_SIZE;
                    }
                }

                // Now, activate the ATP prefetcher

                uint64_t page_addr = vpn; // Page address is the VPN

                int tracker_index = ip % MASP_TRACKER_COUNT;
                MASP_TRACKER& tracker = masp_trackers[tracker_index];
                bool can_prefetch = tracker.update_ip(ip, page_addr);

                bool masp_hit = masp_fpq.check_addr(page_addr);
                bool stride_hit = stride_fpq.check_addr(page_addr);
                bool h2_hit = h2_fpq.check_addr(page_addr);

                // Update confidence counters based on hits
                if (!h2_hit) {
                    if (!masp_hit) {
                        if (!stride_hit) {
                            increase_c0(false);
                        } else {
                            increase_c0(true);
                            increase_c1(false);
                            increase_c2(true);
                        }
                    } else {
                        if (!stride_hit) {
                            increase_c0(true);
                            increase_c1(false);
                            increase_c2(false);
                        } else {
                            increase_c0(true);
                            increase_c1(false);
                        }
                    }
                } else {
                    if (!masp_hit) {
                        if (!stride_hit) {
                            increase_c0(true);
                            increase_c1(true);
                        } else {
                            increase_c0(true);
                            increase_c2(true);
                        }
                    } else {
                        if (!stride_hit) {
                            increase_c0(true);
                            increase_c2(false);
                        } else {
                            increase_c0(true);
                        }
                    }
                }

                // Decide which prefetcher to use based on confidence counters
                if (c0 >= CONF) {
                    if (c1 >= CONF) {
                        // Use H2 prefetcher
                        uint64_t addr1 = page_addr + (page_addr - last_addr);
                        uint64_t addr2 = page_addr + (last_addr - last2_addr);

                        // Check for duplicates before issuing prefetches
                        for (uint64_t pf_vpn : {addr1, addr2}) {
                            if (pending_prefetches.find(pf_vpn) != pending_prefetches.end()) continue;
                            bool in_pq = false, in_sampler = false;
                            for (int i = 0; i < PQ_SIZE; ++i) {
                                if (pq[i].valid && pq[i].vpn == pf_vpn) {
                                    in_pq = true;
                                    break;
                                }
                            }
                            if (in_pq) continue;
                            for (int i = 0; i < SAMPLER_SIZE; ++i) {
                                if (sampler[i].valid && sampler[i].vpn == pf_vpn) {
                                    in_sampler = true;
                                    break;
                                }
                            }
                            if (in_sampler) continue;

                            uint64_t pf_address = pf_vpn << LOG2_PAGE_SIZE;
                            prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);
                            pending_prefetches.insert(pf_vpn);
                        }

                    } else {
                        if (c2 >= CONF) {
                            // Use STRIDE prefetcher
                            uint64_t addr1 = page_addr + 1;
                            uint64_t addr2 = page_addr + 2;

                            // Check for duplicates before issuing prefetches
                            for (uint64_t pf_vpn : {addr1, addr2}) {
                                if (pending_prefetches.find(pf_vpn) != pending_prefetches.end()) continue;
                                bool in_pq = false, in_sampler = false;
                                for (int i = 0; i < PQ_SIZE; ++i) {
                                    if (pq[i].valid && pq[i].vpn == pf_vpn) {
                                        in_pq = true;
                                        break;
                                    }
                                }
                                if (in_pq) continue;
                                for (int i = 0; i < SAMPLER_SIZE; ++i) {
                                    if (sampler[i].valid && sampler[i].vpn == pf_vpn) {
                                        in_sampler = true;
                                        break;
                                    }
                                }
                                if (in_sampler) continue;

                                uint64_t pf_address = pf_vpn << LOG2_PAGE_SIZE;
                                prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);
                                pending_prefetches.insert(pf_vpn);
                            }
                        } else {
                            // Use MASP prefetcher
                            if (can_prefetch) {
                                uint64_t addr1 = page_addr + tracker.last_stride;
                                uint64_t addr2 = page_addr + (page_addr - tracker.last_pg_addr);

                                // Check for duplicates before issuing prefetches
                                for (uint64_t pf_vpn : {addr1, addr2}) {
                                    if (pending_prefetches.find(pf_vpn) != pending_prefetches.end()) continue;
                                    bool in_pq = false, in_sampler = false;
                                    for (int i = 0; i < PQ_SIZE; ++i) {
                                        if (pq[i].valid && pq[i].vpn == pf_vpn) {
                                            in_pq = true;
                                            break;
                                        }
                                    }
                                    if (in_pq) continue;
                                    for (int i = 0; i < SAMPLER_SIZE; ++i) {
                                        if (sampler[i].valid && sampler[i].vpn == pf_vpn) {
                                            in_sampler = true;
                                            break;
                                        }
                                    }
                                    if (in_sampler) continue;

                                    uint64_t pf_address = pf_vpn << LOG2_PAGE_SIZE;
                                    prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);
                                    pending_prefetches.insert(pf_vpn);
                                }
                            }
                        }
                    }
                }

                // Update FPQs
                if (can_prefetch) {
                    masp_fpq.add_entry(page_addr + tracker.last_stride,
                                       page_addr + (page_addr - tracker.last_pg_addr));
                }
                stride_fpq.add_entry(page_addr + 1, page_addr + 2);
                h2_fpq.add_entry(page_addr + (page_addr - last_addr),
                                 page_addr + (last_addr - last2_addr));

                // Update other data
                last2_addr = last_addr;
                last_addr = page_addr;

                tracker.update_data(page_addr);
            }
        }
    }

    return;
}

// Handle prefetch completion
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way,
                                       uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    // addr is the virtual address of the completed prefetch
    uint64_t vpn = addr >> LOG2_PAGE_SIZE;

    // Remove from pending prefetches
    pending_prefetches.erase(vpn);

    // Retrieve free distance
    int fd = (int32_t)metadata_in - 7; // Decode fd from metadata

    if (metadata_in != 0) { // If metadata is non-zero, it's an SBFP prefetch
        // Add to PQ
        pq[pq_fifo_index].vpn = vpn;
        pq[pq_fifo_index].free_distance = fd;
        pq[pq_fifo_index].valid = true;

        // Simulate fetching physical address (PPN)
        pq[pq_fifo_index].ppn = 0; // Placeholder, as actual PPN is not available

        // Update pq_fifo_index
        pq_fifo_index = (pq_fifo_index + 1) % PQ_SIZE;
    }

    // For ATP prefetches, no additional action is required upon prefetch completion

    return;
}

// Final stats function
void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " Combined ATP and SBFP Prefetcher final stats" << endl;
}
